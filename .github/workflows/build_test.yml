name: Build and test

on:
  push:
    branches: [ master ]
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
  pull_request:
    branches: [ master, develop ]

env:
  BUILD_TYPE: Release

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      # fail-fast: Default is true, switch to false to allow one platform to fail and still run others
      fail-fast: false
      matrix:
        name: [ubuntu-20.04, windows-2019-64, windows-2019-32, macos-10.15]
        include:
        - name: ubuntu-20.04
          os: ubuntu-20.04
          PLATFORM_NAME: Linux
          COMPRESSED_EXT: zip
          COMPRESSED_PKG_PATH: _CPack_Packages/Linux/ZIP
          BUILD_RUBY_BINDINGS: ON
          BUILD_PYTHON_BINDINGS: ON
          BUILD_CSHARP_BINDINGS: OFF
          PYTHON_ARCHITECTURE: x64
        - name: windows-2019-64
          os: windows-2019
          PLATFORM_NAME: Windows
          COMPRESSED_EXT: zip
          COMPRESSED_PKG_PATH: _CPack_Packages/win64/ZIP
          BUILD_RUBY_BINDINGS: ON
          BUILD_PYTHON_BINDINGS: ON
          BUILD_CSHARP_BINDINGS: ON
          PYTHON_ARCHITECTURE: x64
        - name: windows-2019-32
          os: windows-2019
          PLATFORM_NAME: Windows
          COMPRESSED_EXT: zip
          COMPRESSED_PKG_PATH: _CPack_Packages/win32/ZIP
          CMAKE_GENERATOR: Visual Studio 16 2019
          CMAKE_GENERATOR_PLATFORM: Win32
          BUILD_RUBY_BINDINGS: OFF
          BUILD_PYTHON_BINDINGS: ON
          BUILD_CSHARP_BINDINGS: ON
          PYTHON_ARCHITECTURE: x86
        - name: macos-10.15
          os: macos-10.15
          PLATFORM_NAME: Darwin
          COMPRESSED_EXT: zip
          COMPRESSED_PKG_PATH: _CPack_Packages/Darwin/ZIP
          BUILD_RUBY_BINDINGS: ON
          BUILD_PYTHON_BINDINGS: ON
          BUILD_CSHARP_BINDINGS: OFF
          PYTHON_ARCHITECTURE: x64
          MACOSX_DEPLOYMENT_TARGET: 10.14
          SDKROOT: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk

    steps:

    - name: Set OS-specific options and system dependencies
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      run: |
        DO_BUILD=1
        if [ "${{ matrix.name }}" == "windows-2019-32" ]; then
          if [[ ${{ github.ref }} =~ .*refs/tags.* ]]; then
            DO_BUILD=1
          elif [[ ${{ github.ref }} =~ .*master.* ]]; then
            DO_BUILD=1
          else
            # don't do 32 bit build on PRs
            DO_BUILD=0
          fi;
        fi;

        echo DO_BUILD=${DO_BUILD} >> $GITHUB_ENV
        echo CMAKE_GENERATOR=${{ matrix.CMAKE_GENERATOR }} >> $GITHUB_ENV
        echo CMAKE_GENERATOR_PLATFORM=${{ matrix.CMAKE_GENERATOR_PLATFORM }} >> $GITHUB_ENV
        echo BUILD_RUBY_BINDINGS=${{ matrix.BUILD_RUBY_BINDINGS }} >> $GITHUB_ENV
        echo BUILD_PYTHON_BINDINGS=${{ matrix.BUILD_PYTHON_BINDINGS }} >> $GITHUB_ENV
        echo BUILD_CSHARP_BINDINGS=${{ matrix.BUILD_CSHARP_BINDINGS }} >> $GITHUB_ENV

    - uses: actions/checkout@v2
      if: ${{env.DO_BUILD == 1}}
      with:
        ref: ${{github.event.pull_request.head.ref}}
        repository: ${{github.event.pull_request.head.repo.full_name}}

    - uses: actions/setup-python@v2
      if: ${{env.DO_BUILD == 1}}
      with:
        python-version: '3.7.x'
        architecture: ${{ matrix.PYTHON_ARCHITECTURE }}

    - uses: actions/setup-ruby@v1
      if: ${{env.DO_BUILD == 1}}
      with:
        ruby-version: '2.5'

    - name: Install system libraries
      if: ${{env.DO_BUILD == 1}}
      shell: bash
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
          sudo apt update
          sudo apt install -y cmake g++
        elif [ "$RUNNER_OS" == "macOS" ]; then
          echo MACOSX_DEPLOYMENT_TARGET=${{ matrix.MACOSX_DEPLOYMENT_TARGET }} >> $GITHUB_ENV
          echo SDKROOT=${{ matrix.SDKROOT }} >> $GITHUB_ENV
          echo CMAKE_MACOSX_DEPLOYMENT_TARGET='-DCMAKE_OSX_DEPLOYMENT_TARGET=$MACOSX_DEPLOYMENT_TARGET' >> $GITHUB_ENV
        fi;

    - name: Install conan
      if: ${{env.DO_BUILD == 1}}
      run: |
          python --version
          pip install conan
          conan --version
          echo "Enabling conan revisions and setting parallel_download"
          conan config set general.revisions_enabled=True
          conan config set general.parallel_download=8

    - name: Configure CMake
      if: ${{env.DO_BUILD == 1}}
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      # Note the current convention is to use the -S and -B options here to specify source
      # and build directories, but this is only available with CMake 3.13 and higher.
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      # NOTE: If you re-enable 'Download the OpenStudio installer' step, then pass `openstudio_DIR=$openstudio_DIR cmake [etc]`
      run: |
        mkdir -p build
        cd build
        echo $(pwd)

        echo "CMAKE_GENERATOR = $CMAKE_GENERATOR"
        echo "CMAKE_GENERATOR_PLATFORM = $CMAKE_GENERATOR_PLATFORM"
        cmake --version
        cmake -DBUILD_RUBY_BINDINGS=$BUILD_RUBY_BINDINGS -DBUILD_PYTHON_BINDINGS=$BUILD_PYTHON_BINDINGS -DBUILD_CSHARP_BINDINGS=$BUILD_CSHARP_BINDINGS ../IsoModel/src

    - name: Build
      if: ${{env.DO_BUILD == 1}}
      working-directory: ./build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: |
        echo $(pwd)
        echo $(ls)
        cmake --build . --target package --config $BUILD_TYPE

    - name: Archive artifacts
      if: ${{env.DO_BUILD == 1}}
      uses: actions/upload-artifact@v2
      with:
          name: IsoModel-${{ github.sha }}-${{ matrix.name }}.${{ matrix.COMPRESSED_EXT }}
          path: build/${{ matrix.COMPRESSED_PKG_PATH }}/*.${{ matrix.COMPRESSED_EXT }}

    - name: Upload artifacts to release
      if: ${{env.DO_BUILD == 1 && contains(github.ref, 'refs/tags')}}
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: build/${{ matrix.COMPRESSED_PKG_PATH }}/*.${{ matrix.COMPRESSED_EXT }}
        tag: ${{ github.ref }}
        overwrite: true
        file_glob: true

    - name: Test
      if: ${{env.DO_BUILD == 1}}
      working-directory: ./build
      shell: bash
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: |
          ctest -j -T test --no-compress-output -C $BUILD_TYPE

